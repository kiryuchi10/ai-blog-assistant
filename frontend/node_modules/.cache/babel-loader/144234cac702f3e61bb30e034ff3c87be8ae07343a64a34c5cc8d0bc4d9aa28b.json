{"ast":null,"code":"import { apiClient } from './apiClient';\nclass AuthService {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1';\n  }\n\n  // Login user\n  async login(credentials) {\n    try {\n      const response = await apiClient.post('/auth/login', credentials);\n      if (response.data.access_token) {\n        // Store token in localStorage\n        localStorage.setItem('token', response.data.access_token);\n\n        // Set default authorization header\n        apiClient.defaults.headers.common['Authorization'] = `Bearer ${response.data.access_token}`;\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Register user\n  async register(userData) {\n    try {\n      const response = await apiClient.post('/auth/register', userData);\n      if (response.data.access_token) {\n        // Store token in localStorage\n        localStorage.setItem('token', response.data.access_token);\n\n        // Set default authorization header\n        apiClient.defaults.headers.common['Authorization'] = `Bearer ${response.data.access_token}`;\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Logout user\n  logout() {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n\n    // Remove authorization header\n    delete apiClient.defaults.headers.common['Authorization'];\n    return Promise.resolve();\n  }\n\n  // Get user profile\n  async getProfile() {\n    try {\n      const response = await apiClient.get('/user/profile');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      const response = await apiClient.put('/user/profile', userData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Change password\n  async changePassword(passwordData) {\n    try {\n      const response = await apiClient.post('/auth/change-password', passwordData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Request password reset\n  async requestPasswordReset(email) {\n    try {\n      const response = await apiClient.post('/auth/forgot-password', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Reset password with token\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await apiClient.post('/auth/reset-password', {\n        token,\n        new_password: newPassword\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Refresh access token\n  async refreshToken() {\n    try {\n      const response = await apiClient.post('/auth/refresh');\n      if (response.data.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n        apiClient.defaults.headers.common['Authorization'] = `Bearer ${response.data.access_token}`;\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Verify email\n  async verifyEmail(token) {\n    try {\n      const response = await apiClient.post('/auth/verify-email', {\n        token\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend verification email\n  async resendVerification(email) {\n    try {\n      const response = await apiClient.post('/auth/resend-verification', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n\n    // Check if token is expired\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp * 1000 > Date.now();\n    } catch {\n      return false;\n    }\n  }\n\n  // Get token from localStorage\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  // Get token expiry\n  getTokenExpiry(token = null) {\n    const authToken = token || this.getToken();\n    if (!authToken) return null;\n    try {\n      const payload = JSON.parse(atob(authToken.split('.')[1]));\n      return payload.exp * 1000; // Convert to milliseconds\n    } catch {\n      return null;\n    }\n  }\n\n  // Set up axios interceptor for token refresh\n  setupInterceptors() {\n    // Request interceptor to add token\n    apiClient.interceptors.request.use(config => {\n      const token = this.getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n\n    // Response interceptor to handle token refresh\n    apiClient.interceptors.response.use(response => response, async error => {\n      var _error$response;\n      const originalRequest = error.config;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        try {\n          await this.refreshToken();\n          return apiClient(originalRequest);\n        } catch (refreshError) {\n          // Refresh failed, redirect to login\n          this.logout();\n          window.location.href = '/login';\n          return Promise.reject(refreshError);\n        }\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Handle API errors\n  handleError(error) {\n    if (error.response) {\n      var _error$response$data, _error$response$data2;\n      // Server responded with error status\n      const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.detail) || 'An error occurred';\n      return new Error(message);\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error('Network error. Please check your connection.');\n    } else {\n      // Something else happened\n      return new Error(error.message || 'An unexpected error occurred');\n    }\n  }\n\n  // Validate email format\n  validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  // Validate password strength\n  validatePassword(password) {\n    const minLength = 8;\n    const hasUpperCase = /[A-Z]/.test(password);\n    const hasLowerCase = /[a-z]/.test(password);\n    const hasNumbers = /\\d/.test(password);\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n    return {\n      isValid: password.length >= minLength && hasUpperCase && hasLowerCase && hasNumbers,\n      requirements: {\n        minLength: password.length >= minLength,\n        hasUpperCase,\n        hasLowerCase,\n        hasNumbers,\n        hasSpecialChar\n      }\n    };\n  }\n\n  // Generate password strength score\n  getPasswordStrength(password) {\n    let score = 0;\n    const checks = this.validatePassword(password);\n    if (checks.requirements.minLength) score += 20;\n    if (checks.requirements.hasUpperCase) score += 20;\n    if (checks.requirements.hasLowerCase) score += 20;\n    if (checks.requirements.hasNumbers) score += 20;\n    if (checks.requirements.hasSpecialChar) score += 20;\n    return {\n      score,\n      level: score < 40 ? 'weak' : score < 80 ? 'medium' : 'strong'\n    };\n  }\n}\n\n// Create and export singleton instance\nexport const authService = new AuthService();\n\n// Set up interceptors\nauthService.setupInterceptors();","map":{"version":3,"names":["apiClient","AuthService","constructor","baseURL","process","env","REACT_APP_API_BASE_URL","login","credentials","response","post","data","access_token","localStorage","setItem","defaults","headers","common","error","handleError","register","userData","logout","removeItem","Promise","resolve","getProfile","get","updateProfile","put","changePassword","passwordData","requestPasswordReset","email","resetPassword","token","newPassword","new_password","refreshToken","verifyEmail","resendVerification","isAuthenticated","getItem","payload","JSON","parse","atob","split","exp","Date","now","getToken","getTokenExpiry","authToken","setupInterceptors","interceptors","request","use","config","Authorization","reject","_error$response","originalRequest","status","_retry","refreshError","window","location","href","_error$response$data","_error$response$data2","message","detail","Error","validateEmail","emailRegex","test","validatePassword","password","minLength","hasUpperCase","hasLowerCase","hasNumbers","hasSpecialChar","isValid","length","requirements","getPasswordStrength","score","checks","level","authService"],"sources":["/mnt/c/Users/user/Documents/GitHub/ai-blog-assistant/ai-blog-assistant/frontend/src/services/authService.js"],"sourcesContent":["import { apiClient } from './apiClient';\r\n\r\nclass AuthService {\r\n  constructor() {\r\n    this.baseURL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1';\r\n  }\r\n\r\n  // Login user\r\n  async login(credentials) {\r\n    try {\r\n      const response = await apiClient.post('/auth/login', credentials);\r\n      \r\n      if (response.data.access_token) {\r\n        // Store token in localStorage\r\n        localStorage.setItem('token', response.data.access_token);\r\n        \r\n        // Set default authorization header\r\n        apiClient.defaults.headers.common['Authorization'] = `Bearer ${response.data.access_token}`;\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Register user\r\n  async register(userData) {\r\n    try {\r\n      const response = await apiClient.post('/auth/register', userData);\r\n      \r\n      if (response.data.access_token) {\r\n        // Store token in localStorage\r\n        localStorage.setItem('token', response.data.access_token);\r\n        \r\n        // Set default authorization header\r\n        apiClient.defaults.headers.common['Authorization'] = `Bearer ${response.data.access_token}`;\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Logout user\r\n  logout() {\r\n    // Remove token from localStorage\r\n    localStorage.removeItem('token');\r\n    \r\n    // Remove authorization header\r\n    delete apiClient.defaults.headers.common['Authorization'];\r\n    \r\n    return Promise.resolve();\r\n  }\r\n\r\n  // Get user profile\r\n  async getProfile() {\r\n    try {\r\n      const response = await apiClient.get('/user/profile');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Update user profile\r\n  async updateProfile(userData) {\r\n    try {\r\n      const response = await apiClient.put('/user/profile', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Change password\r\n  async changePassword(passwordData) {\r\n    try {\r\n      const response = await apiClient.post('/auth/change-password', passwordData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Request password reset\r\n  async requestPasswordReset(email) {\r\n    try {\r\n      const response = await apiClient.post('/auth/forgot-password', { email });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Reset password with token\r\n  async resetPassword(token, newPassword) {\r\n    try {\r\n      const response = await apiClient.post('/auth/reset-password', {\r\n        token,\r\n        new_password: newPassword,\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Refresh access token\r\n  async refreshToken() {\r\n    try {\r\n      const response = await apiClient.post('/auth/refresh');\r\n      \r\n      if (response.data.access_token) {\r\n        localStorage.setItem('token', response.data.access_token);\r\n        apiClient.defaults.headers.common['Authorization'] = `Bearer ${response.data.access_token}`;\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Verify email\r\n  async verifyEmail(token) {\r\n    try {\r\n      const response = await apiClient.post('/auth/verify-email', { token });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Resend verification email\r\n  async resendVerification(email) {\r\n    try {\r\n      const response = await apiClient.post('/auth/resend-verification', { email });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Check if user is authenticated\r\n  isAuthenticated() {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return false;\r\n    \r\n    // Check if token is expired\r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      return payload.exp * 1000 > Date.now();\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Get token from localStorage\r\n  getToken() {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  // Get token expiry\r\n  getTokenExpiry(token = null) {\r\n    const authToken = token || this.getToken();\r\n    if (!authToken) return null;\r\n    \r\n    try {\r\n      const payload = JSON.parse(atob(authToken.split('.')[1]));\r\n      return payload.exp * 1000; // Convert to milliseconds\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Set up axios interceptor for token refresh\r\n  setupInterceptors() {\r\n    // Request interceptor to add token\r\n    apiClient.interceptors.request.use(\r\n      (config) => {\r\n        const token = this.getToken();\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => Promise.reject(error)\r\n    );\r\n\r\n    // Response interceptor to handle token refresh\r\n    apiClient.interceptors.response.use(\r\n      (response) => response,\r\n      async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        if (error.response?.status === 401 && !originalRequest._retry) {\r\n          originalRequest._retry = true;\r\n\r\n          try {\r\n            await this.refreshToken();\r\n            return apiClient(originalRequest);\r\n          } catch (refreshError) {\r\n            // Refresh failed, redirect to login\r\n            this.logout();\r\n            window.location.href = '/login';\r\n            return Promise.reject(refreshError);\r\n          }\r\n        }\r\n\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Handle API errors\r\n  handleError(error) {\r\n    if (error.response) {\r\n      // Server responded with error status\r\n      const message = error.response.data?.message || \r\n                     error.response.data?.detail || \r\n                     'An error occurred';\r\n      return new Error(message);\r\n    } else if (error.request) {\r\n      // Request was made but no response received\r\n      return new Error('Network error. Please check your connection.');\r\n    } else {\r\n      // Something else happened\r\n      return new Error(error.message || 'An unexpected error occurred');\r\n    }\r\n  }\r\n\r\n  // Validate email format\r\n  validateEmail(email) {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n\r\n  // Validate password strength\r\n  validatePassword(password) {\r\n    const minLength = 8;\r\n    const hasUpperCase = /[A-Z]/.test(password);\r\n    const hasLowerCase = /[a-z]/.test(password);\r\n    const hasNumbers = /\\d/.test(password);\r\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n\r\n    return {\r\n      isValid: password.length >= minLength && hasUpperCase && hasLowerCase && hasNumbers,\r\n      requirements: {\r\n        minLength: password.length >= minLength,\r\n        hasUpperCase,\r\n        hasLowerCase,\r\n        hasNumbers,\r\n        hasSpecialChar,\r\n      },\r\n    };\r\n  }\r\n\r\n  // Generate password strength score\r\n  getPasswordStrength(password) {\r\n    let score = 0;\r\n    const checks = this.validatePassword(password);\r\n\r\n    if (checks.requirements.minLength) score += 20;\r\n    if (checks.requirements.hasUpperCase) score += 20;\r\n    if (checks.requirements.hasLowerCase) score += 20;\r\n    if (checks.requirements.hasNumbers) score += 20;\r\n    if (checks.requirements.hasSpecialChar) score += 20;\r\n\r\n    return {\r\n      score,\r\n      level: score < 40 ? 'weak' : score < 80 ? 'medium' : 'strong',\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const authService = new AuthService();\r\n\r\n// Set up interceptors\r\nauthService.setupInterceptors();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}