{"ast":null,"code":"import apiClient from './apiClient';\nclass ContentService {\n  /**\r\n   * Generate content using AI\r\n   */\n  async generateContent(data) {\n    try {\n      const response = await apiClient.post('/content/generate', {\n        title: data.title,\n        content: data.content,\n        tone: data.tone,\n        format_type: data.format,\n        include_hashtags: data.includeHashtags,\n        include_seo: data.includeSEO\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Content generation error:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Generate SEO metadata for content\r\n   */\n  async generateSEOMetadata(content, title) {\n    try {\n      const response = await apiClient.post('/content/seo-metadata', {\n        content,\n        title\n      });\n      return response.data;\n    } catch (error) {\n      console.error('SEO metadata generation error:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get content improvement suggestions\r\n   */\n  async getContentSuggestions(content) {\n    try {\n      const response = await apiClient.post('/content/suggestions', {\n        content\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Content suggestions error:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get available content templates\r\n   */\n  async getTemplates() {\n    try {\n      const response = await apiClient.get('/content/templates');\n      return response.data;\n    } catch (error) {\n      console.error('Templates fetch error:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Generate demo content\r\n   */\n  async generateDemoContent() {\n    try {\n      const response = await apiClient.post('/content/demo');\n      return response.data;\n    } catch (error) {\n      console.error('Demo content generation error:', error);\n      // Return fallback content if API fails\n      return {\n        success: true,\n        demo_content: `🚀 AI Blog Assistant: Automating the Future of Technical Content\n\nFollowing up on my goal to build a modular AI-powered innovation lab, I'm excited to introduce the AI Blog Assistant—a tool I built to automate the creation of research summaries, technical blogs, and SEO-ready content.\n\n🧠 Why I Built It\nAs developers, we spend countless hours digesting technical papers, experimenting, and writing documentation. But sharing our insights publicly often takes a back seat. The AI Blog Assistant solves this by turning structured notes, papers, or ideas into coherent, high-quality blog posts—automatically.\n\n🛠 What It Does\n✅ Takes input (bullet points, markdown notes, or PDFs)\n✅ Uses GPT to generate summaries, tutorials, or commentary in a chosen tone (explanatory, concise, humorous, etc.)\n✅ Automatically embeds key terms, links, and SEO meta-structure\n✅ Supports one-click publishing (Notion/Markdown export ready)\n\n📈 Impact on Workflow\n✅ Reduced blog creation time by 70%\n✅ Enabled daily posting with consistent quality\n✅ Increased knowledge retention by forcing structured summarization\n✅ Opened the door to multi-language publishing & cross-platform sharing\n\n🌐 Tech Stack\nReact · GPT API · SEO Schema · Markdown Renderer · Flask Backend (soon to be FastAPI)\n\nComing soon: integration with arXiv, S2ORC, and image captioning via BLIP\n\n🧩 Part of a Bigger System\nThis assistant is one module of my broader effort to build plug-and-play tools, including:\n📊 AI Stock Sentiment Tracker\n🧪 AI-Accelerated DOE for Engineering\n🖼 3D MCP Model Generator\n🎛 UI Mockup Generator\n\n💬 Let's Share Knowledge Better\nI believe tech is best advanced not only by building, but by communicating ideas well. This tool is my attempt to bridge that gap—and I'm happy to open-source it or co-develop it further with researchers, bloggers, and dev teams.\n\n🔗 You can see the project (and others) here: 👉 https://lnkd.in/g2EHhQtd\n\nIf this resonates with your work or vision, let's connect.\n\n#AI #BlogAutomation #KnowledgeSharing #MachineLearning #FullStackDevelopment #LLM #SEO #DeveloperTools #OpenSource #InnovationLab #GPT4`,\n        metadata: {\n          word_count: 250,\n          character_count: 1500,\n          format: 'linkedin',\n          tone: 'professional'\n        }\n      };\n    }\n  }\n\n  /**\r\n   * Export content to different formats\r\n   */\n  async exportContent(content, format) {\n    const exports = {\n      markdown: this._exportToMarkdown(content),\n      html: this._exportToHTML(content),\n      notion: this._exportToNotion(content),\n      json: this._exportToJSON(content)\n    };\n    return exports[format] || content;\n  }\n\n  /**\r\n   * Private method to export to Markdown\r\n   */\n  _exportToMarkdown(content) {\n    // Convert LinkedIn format to Markdown\n    let markdown = content.replace(/🚀|💡|🔥|✨|🎯|🧠|🛠|📈|🌐|🧩|💬|🔗/g, '') // Remove emojis\n    .replace(/^(.+)$/gm, '$1  ') // Add line breaks\n    .replace(/✅/g, '- ') // Convert checkmarks to bullet points\n    .replace(/#(\\w+)/g, '`$1`'); // Convert hashtags to code\n\n    return `# ${content.split('\\n')[0].replace(/🚀\\s*/, '')}\\n\\n${markdown}`;\n  }\n\n  /**\r\n   * Private method to export to HTML\r\n   */\n  _exportToHTML(content) {\n    let html = content.replace(/\\n\\n/g, '</p><p>').replace(/\\n/g, '<br>').replace(/✅/g, '✓').replace(/#(\\w+)/g, '<span class=\"hashtag\">#$1</span>');\n    return `<div class=\"blog-content\"><p>${html}</p></div>`;\n  }\n\n  /**\r\n   * Private method to export to Notion format\r\n   */\n  _exportToNotion(content) {\n    // Notion-friendly format\n    return content.replace(/🚀|💡|🔥|✨|🎯|🧠|🛠|📈|🌐|🧩|💬|🔗/g, '').replace(/✅/g, '☑️').replace(/#(\\w+)/g, '`$1`');\n  }\n\n  /**\r\n   * Private method to export to JSON\r\n   */\n  _exportToJSON(content) {\n    const lines = content.split('\\n').filter(line => line.trim());\n    const title = lines[0].replace(/🚀\\s*/, '');\n    const sections = [];\n    let currentSection = null;\n    lines.slice(1).forEach(line => {\n      if (line.match(/^[🧠🛠📈🌐🧩💬]/)) {\n        if (currentSection) sections.push(currentSection);\n        currentSection = {\n          title: line.replace(/^[🧠🛠📈🌐🧩💬]\\s*/, ''),\n          content: []\n        };\n      } else if (currentSection && line.trim()) {\n        currentSection.content.push(line.replace(/✅\\s*/, ''));\n      }\n    });\n    if (currentSection) sections.push(currentSection);\n    return JSON.stringify({\n      title,\n      sections,\n      hashtags: content.match(/#\\w+/g) || [],\n      metadata: {\n        generated_at: new Date().toISOString(),\n        word_count: content.split(' ').length,\n        character_count: content.length\n      }\n    }, null, 2);\n  }\n\n  /**\r\n   * Analyze content metrics\r\n   */\n  analyzeContent(content) {\n    const words = content.split(/\\s+/).filter(word => word.length > 0);\n    const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 0);\n    const paragraphs = content.split(/\\n\\s*\\n/).filter(p => p.trim().length > 0);\n    const emojis = content.match(/[\\u{1F600}-\\u{1F64F}]|[\\u{1F300}-\\u{1F5FF}]|[\\u{1F680}-\\u{1F6FF}]|[\\u{1F1E0}-\\u{1F1FF}]/gu) || [];\n    const hashtags = content.match(/#\\w+/g) || [];\n    const mentions = content.match(/@\\w+/g) || [];\n    const links = content.match(/https?:\\/\\/[^\\s]+/g) || [];\n    return {\n      word_count: words.length,\n      character_count: content.length,\n      character_count_no_spaces: content.replace(/\\s/g, '').length,\n      sentence_count: sentences.length,\n      paragraph_count: paragraphs.length,\n      avg_words_per_sentence: sentences.length > 0 ? Math.round(words.length / sentences.length) : 0,\n      avg_sentences_per_paragraph: paragraphs.length > 0 ? Math.round(sentences.length / paragraphs.length) : 0,\n      emoji_count: emojis.length,\n      hashtag_count: hashtags.length,\n      mention_count: mentions.length,\n      link_count: links.length,\n      readability_score: this._calculateReadabilityScore(words.length, sentences.length),\n      engagement_elements: {\n        emojis: emojis,\n        hashtags: hashtags,\n        mentions: mentions,\n        links: links,\n        questions: (content.match(/\\?/g) || []).length,\n        exclamations: (content.match(/!/g) || []).length\n      }\n    };\n  }\n\n  /**\r\n   * Calculate simple readability score\r\n   */\n  _calculateReadabilityScore(wordCount, sentenceCount) {\n    if (sentenceCount === 0) return 0;\n    const avgWordsPerSentence = wordCount / sentenceCount;\n\n    // Simple readability score (higher is better)\n    // Based on average sentence length\n    if (avgWordsPerSentence <= 15) return 90; // Very easy\n    if (avgWordsPerSentence <= 20) return 80; // Easy\n    if (avgWordsPerSentence <= 25) return 70; // Fairly easy\n    if (avgWordsPerSentence <= 30) return 60; // Standard\n    if (avgWordsPerSentence <= 35) return 50; // Fairly difficult\n    return 40; // Difficult\n  }\n}\nexport default new ContentService();","map":{"version":3,"names":["apiClient","ContentService","generateContent","data","response","post","title","content","tone","format_type","format","include_hashtags","includeHashtags","include_seo","includeSEO","error","console","generateSEOMetadata","getContentSuggestions","getTemplates","get","generateDemoContent","success","demo_content","metadata","word_count","character_count","exportContent","exports","markdown","_exportToMarkdown","html","_exportToHTML","notion","_exportToNotion","json","_exportToJSON","replace","split","lines","filter","line","trim","sections","currentSection","slice","forEach","match","push","JSON","stringify","hashtags","generated_at","Date","toISOString","length","analyzeContent","words","word","sentences","s","paragraphs","p","emojis","mentions","links","character_count_no_spaces","sentence_count","paragraph_count","avg_words_per_sentence","Math","round","avg_sentences_per_paragraph","emoji_count","hashtag_count","mention_count","link_count","readability_score","_calculateReadabilityScore","engagement_elements","questions","exclamations","wordCount","sentenceCount","avgWordsPerSentence"],"sources":["C:/Users/user/Documents/GitHub/ai-blog-assistant/ai-blog-assistant/frontend/src/services/contentService.js"],"sourcesContent":["import apiClient from './apiClient';\r\n\r\nclass ContentService {\r\n  /**\r\n   * Generate content using AI\r\n   */\r\n  async generateContent(data) {\r\n    try {\r\n      const response = await apiClient.post('/content/generate', {\r\n        title: data.title,\r\n        content: data.content,\r\n        tone: data.tone,\r\n        format_type: data.format,\r\n        include_hashtags: data.includeHashtags,\r\n        include_seo: data.includeSEO,\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Content generation error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate SEO metadata for content\r\n   */\r\n  async generateSEOMetadata(content, title) {\r\n    try {\r\n      const response = await apiClient.post('/content/seo-metadata', {\r\n        content,\r\n        title,\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('SEO metadata generation error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get content improvement suggestions\r\n   */\r\n  async getContentSuggestions(content) {\r\n    try {\r\n      const response = await apiClient.post('/content/suggestions', {\r\n        content,\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Content suggestions error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available content templates\r\n   */\r\n  async getTemplates() {\r\n    try {\r\n      const response = await apiClient.get('/content/templates');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Templates fetch error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate demo content\r\n   */\r\n  async generateDemoContent() {\r\n    try {\r\n      const response = await apiClient.post('/content/demo');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Demo content generation error:', error);\r\n      // Return fallback content if API fails\r\n      return {\r\n        success: true,\r\n        demo_content: `🚀 AI Blog Assistant: Automating the Future of Technical Content\r\n\r\nFollowing up on my goal to build a modular AI-powered innovation lab, I'm excited to introduce the AI Blog Assistant—a tool I built to automate the creation of research summaries, technical blogs, and SEO-ready content.\r\n\r\n🧠 Why I Built It\r\nAs developers, we spend countless hours digesting technical papers, experimenting, and writing documentation. But sharing our insights publicly often takes a back seat. The AI Blog Assistant solves this by turning structured notes, papers, or ideas into coherent, high-quality blog posts—automatically.\r\n\r\n🛠 What It Does\r\n✅ Takes input (bullet points, markdown notes, or PDFs)\r\n✅ Uses GPT to generate summaries, tutorials, or commentary in a chosen tone (explanatory, concise, humorous, etc.)\r\n✅ Automatically embeds key terms, links, and SEO meta-structure\r\n✅ Supports one-click publishing (Notion/Markdown export ready)\r\n\r\n📈 Impact on Workflow\r\n✅ Reduced blog creation time by 70%\r\n✅ Enabled daily posting with consistent quality\r\n✅ Increased knowledge retention by forcing structured summarization\r\n✅ Opened the door to multi-language publishing & cross-platform sharing\r\n\r\n🌐 Tech Stack\r\nReact · GPT API · SEO Schema · Markdown Renderer · Flask Backend (soon to be FastAPI)\r\n\r\nComing soon: integration with arXiv, S2ORC, and image captioning via BLIP\r\n\r\n🧩 Part of a Bigger System\r\nThis assistant is one module of my broader effort to build plug-and-play tools, including:\r\n📊 AI Stock Sentiment Tracker\r\n🧪 AI-Accelerated DOE for Engineering\r\n🖼 3D MCP Model Generator\r\n🎛 UI Mockup Generator\r\n\r\n💬 Let's Share Knowledge Better\r\nI believe tech is best advanced not only by building, but by communicating ideas well. This tool is my attempt to bridge that gap—and I'm happy to open-source it or co-develop it further with researchers, bloggers, and dev teams.\r\n\r\n🔗 You can see the project (and others) here: 👉 https://lnkd.in/g2EHhQtd\r\n\r\nIf this resonates with your work or vision, let's connect.\r\n\r\n#AI #BlogAutomation #KnowledgeSharing #MachineLearning #FullStackDevelopment #LLM #SEO #DeveloperTools #OpenSource #InnovationLab #GPT4`,\r\n        metadata: {\r\n          word_count: 250,\r\n          character_count: 1500,\r\n          format: 'linkedin',\r\n          tone: 'professional'\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Export content to different formats\r\n   */\r\n  async exportContent(content, format) {\r\n    const exports = {\r\n      markdown: this._exportToMarkdown(content),\r\n      html: this._exportToHTML(content),\r\n      notion: this._exportToNotion(content),\r\n      json: this._exportToJSON(content),\r\n    };\r\n\r\n    return exports[format] || content;\r\n  }\r\n\r\n  /**\r\n   * Private method to export to Markdown\r\n   */\r\n  _exportToMarkdown(content) {\r\n    // Convert LinkedIn format to Markdown\r\n    let markdown = content\r\n      .replace(/🚀|💡|🔥|✨|🎯|🧠|🛠|📈|🌐|🧩|💬|🔗/g, '') // Remove emojis\r\n      .replace(/^(.+)$/gm, '$1  ') // Add line breaks\r\n      .replace(/✅/g, '- ') // Convert checkmarks to bullet points\r\n      .replace(/#(\\w+)/g, '`$1`'); // Convert hashtags to code\r\n\r\n    return `# ${content.split('\\n')[0].replace(/🚀\\s*/, '')}\\n\\n${markdown}`;\r\n  }\r\n\r\n  /**\r\n   * Private method to export to HTML\r\n   */\r\n  _exportToHTML(content) {\r\n    let html = content\r\n      .replace(/\\n\\n/g, '</p><p>')\r\n      .replace(/\\n/g, '<br>')\r\n      .replace(/✅/g, '✓')\r\n      .replace(/#(\\w+)/g, '<span class=\"hashtag\">#$1</span>');\r\n\r\n    return `<div class=\"blog-content\"><p>${html}</p></div>`;\r\n  }\r\n\r\n  /**\r\n   * Private method to export to Notion format\r\n   */\r\n  _exportToNotion(content) {\r\n    // Notion-friendly format\r\n    return content\r\n      .replace(/🚀|💡|🔥|✨|🎯|🧠|🛠|📈|🌐|🧩|💬|🔗/g, '')\r\n      .replace(/✅/g, '☑️')\r\n      .replace(/#(\\w+)/g, '`$1`');\r\n  }\r\n\r\n  /**\r\n   * Private method to export to JSON\r\n   */\r\n  _exportToJSON(content) {\r\n    const lines = content.split('\\n').filter(line => line.trim());\r\n    const title = lines[0].replace(/🚀\\s*/, '');\r\n    const sections = [];\r\n    let currentSection = null;\r\n\r\n    lines.slice(1).forEach(line => {\r\n      if (line.match(/^[🧠🛠📈🌐🧩💬]/)) {\r\n        if (currentSection) sections.push(currentSection);\r\n        currentSection = {\r\n          title: line.replace(/^[🧠🛠📈🌐🧩💬]\\s*/, ''),\r\n          content: []\r\n        };\r\n      } else if (currentSection && line.trim()) {\r\n        currentSection.content.push(line.replace(/✅\\s*/, ''));\r\n      }\r\n    });\r\n\r\n    if (currentSection) sections.push(currentSection);\r\n\r\n    return JSON.stringify({\r\n      title,\r\n      sections,\r\n      hashtags: content.match(/#\\w+/g) || [],\r\n      metadata: {\r\n        generated_at: new Date().toISOString(),\r\n        word_count: content.split(' ').length,\r\n        character_count: content.length\r\n      }\r\n    }, null, 2);\r\n  }\r\n\r\n  /**\r\n   * Analyze content metrics\r\n   */\r\n  analyzeContent(content) {\r\n    const words = content.split(/\\s+/).filter(word => word.length > 0);\r\n    const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 0);\r\n    const paragraphs = content.split(/\\n\\s*\\n/).filter(p => p.trim().length > 0);\r\n    \r\n    const emojis = content.match(/[\\u{1F600}-\\u{1F64F}]|[\\u{1F300}-\\u{1F5FF}]|[\\u{1F680}-\\u{1F6FF}]|[\\u{1F1E0}-\\u{1F1FF}]/gu) || [];\r\n    const hashtags = content.match(/#\\w+/g) || [];\r\n    const mentions = content.match(/@\\w+/g) || [];\r\n    const links = content.match(/https?:\\/\\/[^\\s]+/g) || [];\r\n\r\n    return {\r\n      word_count: words.length,\r\n      character_count: content.length,\r\n      character_count_no_spaces: content.replace(/\\s/g, '').length,\r\n      sentence_count: sentences.length,\r\n      paragraph_count: paragraphs.length,\r\n      avg_words_per_sentence: sentences.length > 0 ? Math.round(words.length / sentences.length) : 0,\r\n      avg_sentences_per_paragraph: paragraphs.length > 0 ? Math.round(sentences.length / paragraphs.length) : 0,\r\n      emoji_count: emojis.length,\r\n      hashtag_count: hashtags.length,\r\n      mention_count: mentions.length,\r\n      link_count: links.length,\r\n      readability_score: this._calculateReadabilityScore(words.length, sentences.length),\r\n      engagement_elements: {\r\n        emojis: emojis,\r\n        hashtags: hashtags,\r\n        mentions: mentions,\r\n        links: links,\r\n        questions: (content.match(/\\?/g) || []).length,\r\n        exclamations: (content.match(/!/g) || []).length\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate simple readability score\r\n   */\r\n  _calculateReadabilityScore(wordCount, sentenceCount) {\r\n    if (sentenceCount === 0) return 0;\r\n    \r\n    const avgWordsPerSentence = wordCount / sentenceCount;\r\n    \r\n    // Simple readability score (higher is better)\r\n    // Based on average sentence length\r\n    if (avgWordsPerSentence <= 15) return 90; // Very easy\r\n    if (avgWordsPerSentence <= 20) return 80; // Easy\r\n    if (avgWordsPerSentence <= 25) return 70; // Fairly easy\r\n    if (avgWordsPerSentence <= 30) return 60; // Standard\r\n    if (avgWordsPerSentence <= 35) return 50; // Fairly difficult\r\n    return 40; // Difficult\r\n  }\r\n}\r\n\r\nexport default new ContentService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}