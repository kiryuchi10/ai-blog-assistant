#!/usr/bin/env python3
"""
Quick Fix Script for AI Blog Assistant
Fixes common startup issues
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def fix_backend_imports():
    """Fix backend import issues"""
    print("üîß Fixing backend import issues...")
    
    backend_dir = Path(__file__).parent / "backend"
    
    # Create __init__.py files if missing
    init_files = [
        backend_dir / "__init__.py",
        backend_dir / "app" / "__init__.py",
        backend_dir / "app" / "core" / "__init__.py",
        backend_dir / "app" / "api" / "__init__.py",
        backend_dir / "app" / "api" / "v1" / "__init__.py",
        backend_dir / "app" / "api" / "v1" / "endpoints" / "__init__.py",
        backend_dir / "app" / "models" / "__init__.py",
        backend_dir / "app" / "schemas" / "__init__.py",
        backend_dir / "app" / "services" / "__init__.py"
    ]
    
    for init_file in init_files:
        if not init_file.exists():
            init_file.parent.mkdir(parents=True, exist_ok=True)
            init_file.write_text("# Auto-generated __init__.py\n")
            print(f"  ‚úÖ Created: {init_file.relative_to(backend_dir)}")
    
    print("‚úÖ Backend imports fixed")

def fix_frontend_dev_server():
    """Fix frontend dev server issues"""
    print("üîß Fixing frontend dev server...")
    
    frontend_dir = Path(__file__).parent / "frontend"
    
    if not frontend_dir.exists():
        print("‚ö†Ô∏è  Frontend directory not found")
        return
    
    # Create .env file to fix dev server issues
    env_file = frontend_dir / ".env"
    env_content = """SKIP_PREFLIGHT_CHECK=true
DANGEROUSLY_DISABLE_HOST_CHECK=true
FAST_REFRESH=false
"""
    
    env_file.write_text(env_content)
    print("  ‚úÖ Created .env file with dev server fixes")
    
    # Update package.json scripts
    package_json = frontend_dir / "package.json"
    if package_json.exists():
        try:
            with open(package_json, 'r') as f:
                data = json.load(f)
            
            # Add alternative start script
            data['scripts']['start-fixed'] = "SKIP_PREFLIGHT_CHECK=true react-scripts start"
            
            with open(package_json, 'w') as f:
                json.dump(data, f, indent=2)
            
            print("  ‚úÖ Added start-fixed script to package.json")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Could not update package.json: {e}")
    
    print("‚úÖ Frontend dev server fixed")

def create_simple_backend():
    """Create a simple backend for testing"""
    print("üîß Creating simple backend...")
    
    backend_dir = Path(__file__).parent / "backend"
    simple_backend = backend_dir / "simple_server.py"
    
    simple_backend_content = '''#!/usr/bin/env python3
"""
Simple FastAPI server for AI Blog Assistant
Minimal implementation for testing
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn

app = FastAPI(title="AI Blog Assistant API", version="1.0.0")

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class ContentRequest(BaseModel):
    title: str
    content_type: str = "blog_post"
    keywords: list = []

class ContentResponse(BaseModel):
    title: str
    content: str
    status: str = "generated"

@app.get("/")
async def root():
    return {
        "message": "AI Blog Assistant API is running",
        "version": "1.0.0",
        "status": "healthy"
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "ai-blog-assistant-api",
        "version": "1.0.0"
    }

@app.post("/api/v1/content/generate", response_model=ContentResponse)
async def generate_content(request: ContentRequest):
    """Generate blog content"""
    
    # Simple mock content generation
    mock_content = f"""
# {request.title}

This is a sample blog post generated by the AI Blog Assistant.

## Introduction
Welcome to this automatically generated content about {request.title}.

## Main Content
Here's some detailed information about the topic. This content would normally be generated using advanced AI models, but for testing purposes, we're using this mock content.

Keywords: {', '.join(request.keywords) if request.keywords else 'No keywords provided'}

## Conclusion
Thank you for reading this sample blog post. The AI Blog Assistant is working correctly!
"""
    
    return ContentResponse(
        title=request.title,
        content=mock_content.strip()
    )

@app.get("/api/v1/content/templates")
async def get_templates():
    """Get available content templates"""
    return {
        "templates": [
            {"id": "blog_post", "name": "Blog Post", "description": "Standard blog post format"},
            {"id": "article", "name": "Article", "description": "Long-form article"},
            {"id": "social_media", "name": "Social Media", "description": "Short social media post"}
        ]
    }

if __name__ == "__main__":
    print("üöÄ Starting AI Blog Assistant Simple Server...")
    print("üìç Server will be available at: http://localhost:8000")
    print("üìñ API docs at: http://localhost:8000/docs")
    
    uvicorn.run(
        "simple_server:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
'''
    
    simple_backend.write_text(simple_backend_content)
    print(f"  ‚úÖ Created: {simple_backend}")
    print("‚úÖ Simple backend created")

def install_dependencies():
    """Install required dependencies"""
    print("üì¶ Installing dependencies...")
    
    backend_requirements = [
        "fastapi",
        "uvicorn[standard]",
        "pydantic",
        "python-multipart"
    ]
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install"
        ] + backend_requirements)
        print("‚úÖ Backend dependencies installed")
    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è  Could not install dependencies: {e}")

def main():
    """Run all fixes"""
    print("üõ†Ô∏è  AI Blog Assistant Quick Fix")
    print("=" * 40)
    
    # Fix backend
    fix_backend_imports()
    create_simple_backend()
    install_dependencies()
    
    # Fix frontend
    fix_frontend_dev_server()
    
    print("\n" + "=" * 40)
    print("‚úÖ Quick fixes applied!")
    print("\nüìã Next steps:")
    print("1. Start backend: cd backend && python simple_server.py")
    print("2. Start frontend: cd frontend && npm run start-fixed")
    print("   (or use: npm start)")
    print("3. Open browser: http://localhost:3000")
    print("\nüîß If issues persist:")
    print("- Backend: Try python run_server.py")
    print("- Frontend: Try node fix_dev_server.js first")

if __name__ == "__main__":
    main()
'''